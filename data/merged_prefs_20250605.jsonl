{"prompt": "Write a Python function to calculate fibonacci numbers", "chosen": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "rejected": "def fib(x):\n    a,b=0,1\n    for i in range(x):\n        a,b=b,a+b\n    return a"}
{"prompt": "Explain the concept of machine learning", "chosen": "Machine learning is a subset of artificial intelligence that enables computers to learn and improve from experience without being explicitly programmed. It uses algorithms to analyze data, identify patterns, and make predictions or decisions.", "rejected": "Machine learning is when computers get smart by looking at lots of data and figuring out patterns."}
{"prompt": "How do you handle errors in Python?", "chosen": "In Python, you handle errors using try-except blocks:\n\ntry:\n    # risky code here\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')\nexcept Exception as e:\n    print(f'An error occurred: {e}')", "rejected": "You use try catch blocks like in Java but Python calls them try except."}
{"prompt": "What is the difference between a list and a tuple in Python?", "chosen": "Lists are mutable (can be changed after creation) and use square brackets [], while tuples are immutable (cannot be changed) and use parentheses (). Lists are good for dynamic data, tuples for fixed data that shouldn't change.", "rejected": "Lists use [] and tuples use (). Lists can change, tuples can't."}
{"prompt": "Write a SQL query to find the top 10 customers by sales", "chosen": "SELECT customer_id, customer_name, SUM(order_total) as total_sales\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nGROUP BY customer_id, customer_name\nORDER BY total_sales DESC\nLIMIT 10;", "rejected": "SELECT * FROM customers ORDER BY sales DESC LIMIT 10"}
{"prompt": "Debug this Python code that's not working", "chosen": "I'll help you debug the code. Please share the code and describe the expected vs actual behavior. Common debugging steps:\n1. Check for syntax errors\n2. Add print statements to trace execution\n3. Use a debugger or IDE breakpoints\n4. Review error messages carefully", "rejected": "Your code is broken. Fix the bugs and it will work."}
{"prompt": "Best practices for API design", "chosen": "Key API design principles:\n1. Use RESTful conventions (GET, POST, PUT, DELETE)\n2. Implement proper HTTP status codes\n3. Version your API (/v1/, /v2/)\n4. Use consistent naming conventions\n5. Provide comprehensive documentation\n6. Include rate limiting and authentication\n7. Return meaningful error messages", "rejected": "Make APIs that work fast and don't break."}
{"prompt": "How to optimize database performance?", "chosen": "Database optimization strategies:\n1. Index frequently queried columns\n2. Optimize query structure (avoid SELECT *)\n3. Use connection pooling\n4. Implement caching layers\n5. Normalize data appropriately\n6. Monitor slow queries\n7. Consider partitioning for large tables\n8. Regular maintenance (VACUUM, ANALYZE)", "rejected": "Add indexes everywhere and use faster hardware."}
{"prompt": "Explain microservices architecture", "chosen": "Microservices architecture breaks applications into small, independent services that communicate over well-defined APIs. Benefits include: independent deployment, technology diversity, fault isolation, and scalability. Challenges include: distributed system complexity, network latency, data consistency, and monitoring overhead.", "rejected": "Microservices means splitting your app into lots of small pieces that talk to each other."}
{"prompt": "How to secure a web application?", "chosen": "Web application security best practices:\n1. Input validation and sanitization\n2. Use HTTPS everywhere\n3. Implement proper authentication/authorization\n4. Protect against OWASP Top 10 (SQL injection, XSS, CSRF)\n5. Keep dependencies updated\n6. Use security headers (CSP, HSTS)\n7. Regular security audits and penetration testing\n8. Principle of least privilege", "rejected": "Use passwords and encrypt stuff."}
