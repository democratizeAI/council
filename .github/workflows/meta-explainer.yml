name: QA-301 Meta Explainer Integration

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate meta explanation'
        required: false
        default: 'false'

env:
  PROMETHEUS_GATEWAY: localhost:9091
  PR_META_DIR: /tmp/pr_meta
  PHI_MODEL_ENDPOINT: http://localhost:8001/v1/completions

jobs:
  meta-explainer:
    name: Generate Meta Explanation Hash
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for diff generation
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.sws.txt
        pip install pyyaml redis aiohttp prometheus-client
        
    - name: Cache Phi-3-mini model (if using local inference)
      uses: actions/cache@v3
      with:
        path: ~/.cache/huggingface
        key: ${{ runner.os }}-huggingface-phi3mini
        restore-keys: |
          ${{ runner.os }}-huggingface-
          
    - name: Start Redis for A2A events
      run: |
        sudo apt-get update
        sudo apt-get install -y redis-server
        sudo systemctl start redis-server
        
    - name: Start Prometheus Pushgateway
      run: |
        wget https://github.com/prometheus/pushgateway/releases/download/v1.6.2/pushgateway-1.6.2.linux-amd64.tar.gz
        tar xzf pushgateway-1.6.2.linux-amd64.tar.gz
        ./pushgateway-1.6.2.linux-amd64/pushgateway --web.listen-address=:9091 &
        sleep 5
        
    - name: Check for existing meta explanation
      id: check_meta
      run: |
        if [[ -f "meta_hash.yaml" && "${{ github.event.inputs.force_regenerate }}" != "true" ]]; then
          echo "meta_exists=true" >> $GITHUB_OUTPUT
        else
          echo "meta_exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate meta explanation
      if: steps.check_meta.outputs.meta_exists == 'false'
      run: |
        chmod +x scripts/ci-meta-explainer.sh
        ./scripts/ci-meta-explainer.sh
        
    - name: Validate meta hash format
      run: |
        if [[ ! -f "meta_hash.yaml" ]]; then
          echo "‚ùå meta_hash.yaml not found after generation"
          exit 1
        fi
        
        # Validate YAML structure
        python3 -c "
        import yaml
        import re
        
        with open('meta_hash.yaml') as f:
            data = yaml.safe_load(f)
        
        # Check required fields
        required = ['meta_hash', 'summary', 'logic_change_type', 'affected_modules']
        missing = [f for f in required if f not in data]
        if missing:
            raise ValueError(f'Missing fields: {missing}')
        
        # Validate hash format
        if not re.match(r'^[a-f0-9]{8}$', data['meta_hash']):
            raise ValueError(f'Invalid hash: {data[\"meta_hash\"]}')
        
        print(f'‚úÖ Meta hash validated: {data[\"meta_hash\"]}')
        "
        
    - name: Store PR metadata
      run: |
        # Create PR metadata directory
        mkdir -p "$PR_META_DIR/${{ github.event.pull_request.head.sha }}"
        cp meta_hash.yaml "$PR_META_DIR/${{ github.event.pull_request.head.sha }}/"
        
        # Store PR context
        cat > "$PR_META_DIR/${{ github.event.pull_request.head.sha }}/pr_context.json" << EOF
        {
          "pr_number": ${{ github.event.pull_request.number }},
          "pr_title": "${{ github.event.pull_request.title }}",
          "pr_url": "${{ github.event.pull_request.html_url }}",
          "head_sha": "${{ github.event.pull_request.head.sha }}",
          "base_ref": "${{ github.event.pull_request.base.ref }}",
          "head_ref": "${{ github.event.pull_request.head.ref }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
        
    - name: Commit meta explanation (if new)
      if: steps.check_meta.outputs.meta_exists == 'false'
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add meta_hash.yaml to the PR
        git add meta_hash.yaml
        
        # Only commit if there are changes
        if ! git diff --cached --quiet; then
          git commit -m "üìù Add meta explanation hash
          
          Meta hash: $(grep 'meta_hash:' meta_hash.yaml | cut -d' ' -f2)
          Summary: $(grep 'summary:' meta_hash.yaml | cut -d' ' -f2- | tr -d '\"')
          
          Generated by QA-301 Meta Explainer"
          
          # Push changes
          git push
          
          echo "‚úÖ Meta explanation committed and pushed"
        else
          echo "‚ÑπÔ∏è No changes to commit"
        fi
        
    - name: Comment on PR with meta information
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const yaml = require('js-yaml');
          
          if (!fs.existsSync('meta_hash.yaml')) {
            return;
          }
          
          const metaData = yaml.load(fs.readFileSync('meta_hash.yaml', 'utf8'));
          
          const body = `## üß† Meta Explanation Generated (QA-301)
          
          **Meta Hash:** \`${metaData.meta_hash}\`
          **Change Type:** \`${metaData.logic_change_type}\`
          **Model:** \`${metaData.model}\`
          **Deterministic:** ${metaData.deterministic ? '‚úÖ' : '‚ùå'}
          
          **Summary:**
          > ${metaData.summary}
          
          **Affected Modules:**
          ${metaData.affected_modules.map(m => `- \`${m}\``).join('\n')}
          
          ---
          *This meta explanation enables deterministic tie-breaking for nondeterministic diffs and downstream Gemini auditing.*
          `;
          
          // Check if we already commented
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.body.includes('Meta Explanation Generated (QA-301)')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: body
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
          
    - name: Publish metrics
      run: |
        # Extract meta information for metrics
        META_HASH=$(grep 'meta_hash:' meta_hash.yaml | cut -d' ' -f2)
        CHANGE_TYPE=$(grep 'logic_change_type:' meta_hash.yaml | cut -d' ' -f2 | tr -d '"')
        MODEL=$(grep 'model:' meta_hash.yaml | cut -d' ' -f2- | tr -d '"')
        
        # Push metrics to Prometheus
        cat << EOF | curl -X POST --data-binary @- "http://localhost:9091/metrics/job/github_meta_explainer/instance/pr_${{ github.event.pull_request.number }}"
        # TYPE github_meta_explanation_generated counter
        github_meta_explanation_generated{change_type="$CHANGE_TYPE",model="$MODEL",pr_number="${{ github.event.pull_request.number }}"} 1
        # TYPE github_meta_explanation_timestamp gauge
        github_meta_explanation_timestamp $(date +%s)
        EOF
        
    - name: Set PatchCtl status
      run: |
        # Create PatchCtl status file for downstream processing
        cat > patchctl_meta_status.json << EOF
        {
          "meta_explanation_generated": true,
          "meta_hash": "$(grep 'meta_hash:' meta_hash.yaml | cut -d' ' -f2)",
          "awaiting_meta": false,
          "validation_passed": true,
          "pr_number": ${{ github.event.pull_request.number }},
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
        
        echo "‚úÖ PatchCtl status set: meta explanation available"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: meta-explanation-${{ github.event.pull_request.number }}
        path: |
          meta_hash.yaml
          patchctl_meta_status.json
        retention-days: 30
        
  validate-meta-requirement:
    name: Validate Meta Requirement (PatchCtl Gate)
    runs-on: ubuntu-latest
    needs: meta-explainer
    
    steps:
    - name: Download meta explanation
      uses: actions/download-artifact@v3
      with:
        name: meta-explanation-${{ github.event.pull_request.number }}
        
    - name: Validate PatchCtl meta requirement
      run: |
        if [[ ! -f "meta_hash.yaml" ]]; then
          echo "‚ùå PATCHCTL GATE FAILED: meta_hash.yaml missing"
          echo "This PR is flagged as 'awaiting-meta' until meta explanation is provided."
          exit 1
        fi
        
        if [[ ! -f "patchctl_meta_status.json" ]]; then
          echo "‚ùå PATCHCTL GATE FAILED: meta status missing"
          exit 1
        fi
        
        # Validate status
        if ! jq -e '.meta_explanation_generated == true and .awaiting_meta == false and .validation_passed == true' patchctl_meta_status.json > /dev/null; then
          echo "‚ùå PATCHCTL GATE FAILED: meta explanation requirements not met"
          exit 1
        fi
        
        echo "‚úÖ PATCHCTL GATE PASSED: meta explanation requirements satisfied"
        echo "PR is ready for downstream Gemini auditing with deterministic tie-breaking." 