name: SwarmAI Green-Board CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  SWARM_GPU_PROFILE: ci_test        # Lightweight CI profile
  SWARM_COUNCIL_ENABLED: false     # Disable council for CI
  PYTHONPATH: .
  VRAM_LIMIT_GB: 10.5              # Day-2 VRAM constraint
  P95_LATENCY_LIMIT_MS: 200        # Day-2 latency SLA

jobs:
  green-board-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 6379:6379
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Setup Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-xdist locust requests
        pip install psutil GPUtil

    - name: 🧪 Fast Unit Tests
      run: |
        echo "🧪 Running fast unit tests..."
        pytest -q tests/test_router_fast.py tests/test_memory.py -v --tb=short

    - name: 🏗️ Build Production Image  
      run: |
        echo "🏗️ Building container for soak test..."
        docker build -t swarm-ci:latest .

    - name: 🚀 Start Test Environment
      run: |
        echo "🚀 Starting SwarmAI test environment..."
        docker run -d --name swarm-test \
          -p 8000:8000 \
          -e SWARM_GPU_PROFILE=ci_test \
          -e SWARM_COUNCIL_ENABLED=false \
          -e CUDA_VISIBLE_DEVICES="" \
          swarm-ci:latest
        
        # Wait for startup
        sleep 15
        
        # Health check
        curl -f http://localhost:8000/health || exit 1
        echo "✅ Test environment ready"

    - name: 📊 Memory Baseline Check
      run: |
        echo "📊 Checking memory baseline..."
        python -c "
        import requests
        import psutil
        
        # Get initial memory usage
        initial_memory = psutil.virtual_memory().used / (1024**3)
        print(f'Initial memory: {initial_memory:.2f} GB')
        
        # Basic health check
        resp = requests.get('http://localhost:8000/health')
        resp.raise_for_status()
        
        current_memory = psutil.virtual_memory().used / (1024**3)
        memory_used = current_memory - initial_memory
        
        print(f'Memory after startup: {current_memory:.2f} GB')
        print(f'Memory delta: {memory_used:.2f} GB')
        
        if memory_used > ${VRAM_LIMIT_GB}:
            print(f'❌ Memory usage {memory_used:.2f} GB exceeds limit ${VRAM_LIMIT_GB} GB')
            exit(1)
        else:
            print(f'✅ Memory usage {memory_used:.2f} GB within limit ${VRAM_LIMIT_GB} GB')
        "

    - name: ⚡ 60-Second Locust Soak Test
      run: |
        echo "⚡ Starting 60-second Locust soak test..."
        
        # Create Locust test file
        cat > locust_soak_test.py << 'EOF'
        from locust import HttpUser, task, between
        import json
        import random
        
        class SwarmUser(HttpUser):
            wait_time = between(0.5, 2.0)
            
            def on_start(self):
                # Verify server is ready
                response = self.client.get("/health")
                assert response.status_code == 200
            
            @task(3)
            def simple_math_query(self):
                query = f"What is {random.randint(1, 100)} + {random.randint(1, 100)}?"
                self.client.post("/hybrid", json={"query": query})
            
            @task(2)
            def logic_query(self):
                queries = [
                    "Is 17 a prime number?",
                    "What are the factors of 24?",
                    "Sort these numbers: 5, 2, 8, 1, 9"
                ]
                query = random.choice(queries)
                self.client.post("/hybrid", json={"query": query})
            
            @task(1)
            def health_check(self):
                self.client.get("/health")
        EOF
        
        # Run Locust test
        locust -f locust_soak_test.py --headless --users 5 --spawn-rate 1 \
               --host http://localhost:8000 --run-time 60s \
               --csv=locust_results > locust_output.log 2>&1 &
        
        LOCUST_PID=$!
        
        # Monitor during test
        for i in {1..12}; do
          echo "🔍 Soak test progress: ${i}0s / 60s"
          
          # Check if container is still running
          if ! docker ps | grep -q swarm-test; then
            echo "❌ Container died during soak test"
            exit 1
          fi
          
          # Sample current memory usage
          memory=$(docker stats swarm-test --no-stream --format "table {{.MemUsage}}" | tail -1)
          echo "   Memory: $memory"
          
          sleep 5
        done
        
        # Wait for Locust to complete
        wait $LOCUST_PID
        echo "✅ Locust soak test completed"

    - name: 📈 Analyze Soak Test Results
      run: |
        echo "📈 Analyzing soak test results..."
        
        # Check if results files exist
        if [[ ! -f locust_results_stats.csv ]]; then
          echo "❌ Locust results not found"
          exit 1
        fi
        
        # Analyze latency results
        python -c "
        import csv
        import sys
        
        print('📊 Soak Test Results Analysis:')
        print('=' * 50)
        
        with open('locust_results_stats.csv', 'r') as f:
            reader = csv.DictReader(f)
            for row in reader:
                if row['Type'] == 'Aggregated':
                    continue
                    
                name = row['Name']
                median = float(row['50%'])
                p95 = float(row['95%'])
                avg = float(row['Average'])
                failures = int(row['Failure Count'])
                requests = int(row['Request Count'])
                
                print(f'Endpoint: {name}')
                print(f'  Requests: {requests}')
                print(f'  Failures: {failures} ({failures/requests*100:.1f}%)')
                print(f'  Latency (ms):')
                print(f'    Average: {avg:.1f}')
                print(f'    Median:  {median:.1f}')
                print(f'    P95:     {p95:.1f}')
                
                # Check SLA compliance
                if p95 > ${P95_LATENCY_LIMIT_MS}:
                    print(f'❌ P95 latency {p95:.1f}ms exceeds limit ${P95_LATENCY_LIMIT_MS}ms')
                    sys.exit(1)
                
                if failures / requests > 0.01:  # 1% failure rate
                    print(f'❌ Failure rate {failures/requests*100:.1f}% too high')
                    sys.exit(1)
                
                print(f'✅ {name} passes SLA requirements')
                print()
        
        print('🎉 All endpoints pass Day-2 SLA requirements!')
        "

    - name: 🔍 Final System Health Check
      run: |
        echo "🔍 Final system health validation..."
        
        # Container health
        if ! docker ps | grep -q swarm-test; then
          echo "❌ Container not running after soak test"
          exit 1
        fi
        
        # API responsiveness
        start_time=$(date +%s%3N)
        response=$(curl -s -w "%{http_code}" http://localhost:8000/health)
        end_time=$(date +%s%3N)
        response_time=$((end_time - start_time))
        
        if [[ "$response" != "200" ]]; then
          echo "❌ Health check failed with status: $response"
          exit 1
        fi
        
        if [[ $response_time -gt 1000 ]]; then
          echo "❌ Health check too slow: ${response_time}ms"
          exit 1
        fi
        
        echo "✅ Final health check passed (${response_time}ms)"
        
        # Memory leak check
        final_memory=$(docker stats swarm-test --no-stream --format "{{.MemUsage}}" | cut -d'/' -f1)
        echo "📊 Final memory usage: $final_memory"

    - name: 🧹 Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up test environment..."
        docker logs swarm-test || true
        docker stop swarm-test || true
        docker rm swarm-test || true

    - name: 📋 Upload Test Artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: soak-test-results
        path: |
          locust_results*.csv
          locust_output.log
        retention-days: 7

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: 📦 Install Linting Tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: 🔍 Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

    - name: ✨ Check Code Formatting
      run: |
        black --check --diff .
        isort --check-only --diff .

    - name: 🔎 Type Checking
      run: |
        mypy autogen_api_shim.py router_cascade.py --ignore-missing-imports

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v4

    - name: 🔒 Run Security Scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt

    - name: 🛡️ Dockerfile Security Scan
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile

  green-board-summary:
    needs: [green-board-validation, code-quality, security-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 🎯 Green-Board Status
      run: |
        echo "🎯 Green-Board CI Results Summary:"
        echo "=================================="
        
        # Check job statuses
        VALIDATION_STATUS="${{ needs.green-board-validation.result }}"
        QUALITY_STATUS="${{ needs.code-quality.result }}"
        SECURITY_STATUS="${{ needs.security-scan.result }}"
        
        echo "Soak Test & Performance: $VALIDATION_STATUS"
        echo "Code Quality: $QUALITY_STATUS"  
        echo "Security Scan: $SECURITY_STATUS"
        echo
        
        if [[ "$VALIDATION_STATUS" == "success" && "$QUALITY_STATUS" == "success" && "$SECURITY_STATUS" == "success" ]]; then
          echo "🟢 GREEN BOARD - All checks passed!"
          echo "✅ VRAM usage within limits"
          echo "✅ P95 latency < 200ms SLA"
          echo "✅ 60s soak test stable"
          echo "✅ Code quality standards met"
          echo "✅ Security scan clean"
          echo
          echo "🚀 Ready for production deployment!"
        else
          echo "🔴 RED BOARD - Issues detected"
          echo "❌ Fix issues before merging to main"
          exit 1
        fi 