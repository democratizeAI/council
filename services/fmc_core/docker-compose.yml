version: '3.8'

services:
  # FMC-100: Intent Mapper - Structural parsing with 94% accuracy
  intent-mapper:
    build:
      context: .
      dockerfile: Dockerfile.intent-mapper
    container_name: fmc-100-intent-mapper
    ports:
      - "8086:8086"
    environment:
      - LOG_LEVEL=INFO
      - ACCURACY_TARGET=0.94
    volumes:
      - ./logs:/app/logs
    networks:
      - fmc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "fmc.service=intent-mapper"
      - "fmc.component=FMC-100"
      - "fmc.track=NLP"

  # FMC-110: Spec Gate - Validation and hallucination prevention
  spec-gate:
    build:
      context: .
      dockerfile: Dockerfile.spec-gate
    container_name: fmc-110-spec-gate
    ports:
      - "8087:8087"
    environment:
      - LOG_LEVEL=INFO
      - INVALID_SPEC_TARGET=0
    volumes:
      - ./logs:/app/logs
    networks:
      - fmc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "fmc.service=spec-gate"
      - "fmc.component=FMC-110"
      - "fmc.track=Guardrail"

  # FMC-120: Loop Agent - Feedback and refinement loops
  loop-agent:
    build:
      context: .
      dockerfile: Dockerfile.loop-agent
    container_name: fmc-120-loop-agent
    ports:
      - "8088:8088"
    environment:
      - LOG_LEVEL=INFO
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MIN_FEEDBACK_EVENTS=3
    volumes:
      - ./logs:/app/logs
    networks:
      - fmc-network
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "fmc.service=loop-agent"
      - "fmc.component=FMC-120"
      - "fmc.track=Feedback"

  # Redis for Loop Agent state persistence
  redis:
    image: redis:7-alpine
    container_name: fmc-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - fmc-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: fmc-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - fmc-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: fmc-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=fmc-admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - fmc-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Load balancer for FMC services
  nginx:
    image: nginx:alpine
    container_name: fmc-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - fmc-network
    depends_on:
      - intent-mapper
      - spec-gate
      - loop-agent
    restart: unless-stopped

networks:
  fmc-network:
    driver: bridge
    labels:
      - "fmc.network=core"

volumes:
  redis-data:
    labels:
      - "fmc.volume=redis-persistence"
  prometheus-data:
    labels:
      - "fmc.volume=metrics-storage"
  grafana-data:
    labels:
      - "fmc.volume=dashboard-config" 