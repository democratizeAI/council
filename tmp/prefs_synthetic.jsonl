{"prompt": "Debug this Python code that's not working", "chosen": "I'll help you debug the code. Please share the code and describe the expected vs actual behavior. Common debugging steps:\n1. Check for syntax errors\n2. Add print statements to trace execution\n3. Use a debugger or IDE breakpoints\n4. Review error messages carefully", "rejected": "Your code is broken. Fix the bugs and it will work."}
{"prompt": "Best practices for API design", "chosen": "Key API design principles:\n1. Use RESTful conventions (GET, POST, PUT, DELETE)\n2. Implement proper HTTP status codes\n3. Version your API (/v1/, /v2/)\n4. Use consistent naming conventions\n5. Provide comprehensive documentation\n6. Include rate limiting and authentication\n7. Return meaningful error messages", "rejected": "Make APIs that work fast and don't break."}
{"prompt": "How to optimize database performance?", "chosen": "Database optimization strategies:\n1. Index frequently queried columns\n2. Optimize query structure (avoid SELECT *)\n3. Use connection pooling\n4. Implement caching layers\n5. Normalize data appropriately\n6. Monitor slow queries\n7. Consider partitioning for large tables\n8. Regular maintenance (VACUUM, ANALYZE)", "rejected": "Add indexes everywhere and use faster hardware."}
{"prompt": "Explain microservices architecture", "chosen": "Microservices architecture breaks applications into small, independent services that communicate over well-defined APIs. Benefits include: independent deployment, technology diversity, fault isolation, and scalability. Challenges include: distributed system complexity, network latency, data consistency, and monitoring overhead.", "rejected": "Microservices means splitting your app into lots of small pieces that talk to each other."}
{"prompt": "How to secure a web application?", "chosen": "Web application security best practices:\n1. Input validation and sanitization\n2. Use HTTPS everywhere\n3. Implement proper authentication/authorization\n4. Protect against OWASP Top 10 (SQL injection, XSS, CSRF)\n5. Keep dependencies updated\n6. Use security headers (CSP, HSTS)\n7. Regular security audits and penetration testing\n8. Principle of least privilege", "rejected": "Use passwords and encrypt stuff."} 