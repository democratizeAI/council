#!/usr/bin/env python3
"""
Sample Sonnet-A Builder Output
Generated by Sonnet-A agent for QA-300 testing
"""

import os
import sys
import json
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from datetime import datetime

@dataclass
class ProcessingResult:
    """Result of data processing operation"""
    id: str
    status: str
    data: Dict[str, Any]
    timestamp: datetime
    error: Optional[str] = None

class DataProcessor:
    """Main data processing class"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.results = []
        
    def validate_input(self, data: Dict[str, Any]) -> bool:
        """Validate input data structure"""
        required_fields = ['id', 'type', 'content']
        
        for field in required_fields:
            if field not in data:
                return False
        
        return True
    
    def process_item(self, item: Dict[str, Any]) -> ProcessingResult:
        """Process a single data item"""
        if not self.validate_input(item):
            return ProcessingResult(
                id=item.get('id', 'unknown'),
                status='error',
                data={},
                timestamp=datetime.now(),
                error='Invalid input format'
            )
        
        try:
            # Processing logic
            processed_data = {
                'original_id': item['id'],
                'type': item['type'],
                'processed_content': self.transform_content(item['content']),
                'metadata': self.extract_metadata(item)
            }
            
            result = ProcessingResult(
                id=item['id'],
                status='success',
                data=processed_data,
                timestamp=datetime.now()
            )
            
            self.results.append(result)
            return result
            
        except Exception as e:
            return ProcessingResult(
                id=item['id'],
                status='error',
                data={},
                timestamp=datetime.now(),
                error=str(e)
            )
    
    def transform_content(self, content: str) -> str:
        """Transform content data"""
        # Basic transformation
        transformed = content.strip().upper()
        
        # Apply filters
        if len(transformed) > 100:
            transformed = transformed[:100] + "..."
        
        return transformed
    
    def extract_metadata(self, item: Dict[str, Any]) -> Dict[str, Any]:
        """Extract metadata from item"""
        metadata = {
            'length': len(item.get('content', '')),
            'has_special_chars': any(c in item.get('content', '') for c in '!@#$%'),
            'word_count': len(item.get('content', '').split())
        }
        
        return metadata
    
    def process_batch(self, items: List[Dict[str, Any]]) -> List[ProcessingResult]:
        """Process multiple items"""
        results = []
        
        for item in items:
            result = self.process_item(item)
            results.append(result)
        
        return results
    
    def get_summary(self) -> Dict[str, Any]:
        """Get processing summary"""
        total = len(self.results)
        successful = len([r for r in self.results if r.status == 'success'])
        failed = total - successful
        
        return {
            'total_processed': total,
            'successful': successful,
            'failed': failed,
            'success_rate': successful / total if total > 0 else 0.0
        }

def main():
    """Main processing function"""
    config = {
        'batch_size': 100,
        'timeout': 30,
        'retry_count': 3
    }
    
    processor = DataProcessor(config)
    
    # Sample data
    test_data = [
        {
            'id': 'item_001',
            'type': 'document',
            'content': 'This is a sample document for processing.'
        },
        {
            'id': 'item_002',
            'type': 'text',
            'content': 'Another piece of text to be transformed.'
        }
    ]
    
    # Process data
    results = processor.process_batch(test_data)
    
    # Output results
    for result in results:
        print(f"Processed {result.id}: {result.status}")
        if result.error:
            print(f"  Error: {result.error}")
    
    # Print summary
    summary = processor.get_summary()
    print(f"\nSummary: {summary['successful']}/{summary['total_processed']} successful")

if __name__ == "__main__":
    main() 