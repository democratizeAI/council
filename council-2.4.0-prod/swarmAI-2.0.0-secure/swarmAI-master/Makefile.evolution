# üê≥üé≠ü™¥ Evolution-Main Branch Makefile
# Production Docker Containerization Workflow

.PHONY: help build up down restart status health logs clean gpu-test evolution-status push-evolution crawler-status crawler-run crawler-stats feeder-status

# Default target
help:
	@echo "üê≥üé≠ü™¥ Emotional Tamagotchi Evolution Docker Commands"
	@echo ""
	@echo "üöÄ DEPLOYMENT:"
	@echo "  build              Build all Docker images for evolution"
	@echo "  up                 Start the evolution stack"
	@echo "  down               Stop the evolution stack"
	@echo "  restart            Restart the evolution stack"
	@echo ""
	@echo "üìä MONITORING:"
	@echo "  status             Show container status"
	@echo "  health             Check all health endpoints"
	@echo "  logs               Show logs from all services"
	@echo "  evolution-status   Show evolution system status"
	@echo ""
	@echo "üï∑Ô∏è CRAWLER & FEEDING:"
	@echo "  crawler-status     Check crawler system status"
	@echo "  crawler-run        Run crawler immediately"
	@echo "  crawler-stats      View crawler statistics"
	@echo "  feeder-status      Check auto-feeder status"
	@echo "  feeder-run         Force immediate feeding"
	@echo "  challenge-queue    Show challenge queue status"
	@echo ""
	@echo "üîß MAINTENANCE:"
	@echo "  clean              Clean up Docker resources"
	@echo "  gpu-test           Test GPU access in containers"
	@echo "  push-evolution     Push to evolution-main branch"
	@echo ""
	@echo "üéØ QUICK START:"
	@echo "  make build && make up && make health"

# Build all Docker images
build:
	@echo "üî® Building Evolution Docker Images..."
	docker-compose -f docker-compose.evolution.yml build --parallel
	@echo "‚úÖ Build complete!"

# Start the evolution stack
up:
	@echo "üöÄ Starting Emotional Tamagotchi Evolution Stack..."
	docker-compose -f docker-compose.evolution.yml up -d
	@echo "üé≠ Evolution stack started!"
	@echo "üåê Web UI: http://localhost:5000"
	@echo "üìä Grafana: http://localhost:3000"
	@echo "üìà Prometheus: http://localhost:9091"

# Stop the evolution stack
down:
	@echo "üõë Stopping Evolution Stack..."
	docker-compose -f docker-compose.evolution.yml down
	@echo "‚úÖ Evolution stack stopped!"

# Restart the evolution stack
restart: down up

# Show container status
status:
	@echo "üìä Evolution Container Status:"
	docker-compose -f docker-compose.evolution.yml ps
	@echo ""
	@echo "üê≥ Docker System Info:"
	docker system df

# Check all health endpoints
health:
	@echo "üè• Checking Evolution Health Endpoints..."
	@echo ""
	@echo "üß† Swarm API Health:"
	@curl -f http://localhost:8000/health || echo "‚ùå Swarm API unhealthy"
	@curl -f http://localhost:8000/health/logic_god || echo "‚ùå Logic God unhealthy"
	@echo ""
	@echo "üî• Trainer Health:"
	@docker-compose -f docker-compose.evolution.yml exec -T trainer python3 -c "import psutil; print('‚úÖ Trainer healthy' if any('trainer_worker' in p.name() for p in psutil.process_iter()) else '‚ùå Trainer unhealthy')" || echo "‚ùå Trainer container unreachable"
	@echo ""
	@echo "üé≠ Scheduler Health:"
	@curl -f http://localhost:8081/health || echo "‚ùå Scheduler unhealthy"
	@echo ""
	@echo "üìä Prometheus Health:"
	@curl -f http://localhost:9091/-/healthy || echo "‚ùå Prometheus unhealthy"
	@echo ""
	@echo "üìà Grafana Health:"
	@curl -f http://localhost:3000/api/health || echo "‚ùå Grafana unhealthy"
	@echo ""
	@echo "üåê Web UI Health:"
	@curl -f http://localhost:5000/api/status || echo "‚ùå Web UI unhealthy"

# Show logs from all services
logs:
	@echo "üìã Evolution Stack Logs:"
	docker-compose -f docker-compose.evolution.yml logs --tail=50

# Show logs for specific service
logs-api:
	docker-compose -f docker-compose.evolution.yml logs -f swarm-api

logs-trainer:
	docker-compose -f docker-compose.evolution.yml logs -f trainer

logs-scheduler:
	docker-compose -f docker-compose.evolution.yml logs -f roundtable-scheduler

logs-web:
	docker-compose -f docker-compose.evolution.yml logs -f web-ui

# Test GPU access
gpu-test:
	@echo "üéÆ Testing GPU Access..."
	@echo "Host GPU Status:"
	nvidia-smi || echo "‚ùå No GPU on host"
	@echo ""
	@echo "Container GPU Access:"
	docker run --rm --gpus all nvidia/cuda:12.2-runtime nvidia-smi || echo "‚ùå No GPU access in containers"

# Show evolution system status
evolution-status:
	@echo "ü™¥ Tamagotchi Evolution Status:"
	@echo ""
	@echo "üìÅ Jobs Queue:"
	@ls -la jobs/queue/ 2>/dev/null | wc -l || echo "0"
	@echo ""
	@echo "üß¨ LoRA Adapters:"
	@ls -la lora_adapters/ 2>/dev/null | wc -l || echo "0"
	@echo ""
	@echo "üìä Performance History:"
	@wc -l performance_history.jsonl 2>/dev/null || echo "0 entries"
	@echo ""
	@echo "üîê Evolution Checksums:"
	@wc -l evolution_checksums.txt 2>/dev/null || echo "0 entries"

# Crawler and Feeder Management Commands

# Check crawler system status
crawler-status:
	@echo "üï∑Ô∏è Crawler System Status:"
	@echo ""
	@echo "üîç Crawler Service:"
	@docker-compose -f docker-compose.evolution.yml exec -T roundtable-scheduler \
		python3 -c "import os; print('‚úÖ Crawler enabled' if os.getenv('CRAWLER_ENABLED', 'true') == 'true' else '‚ùå Crawler disabled')" 2>/dev/null || echo "‚ùå Crawler service unreachable"
	@echo ""
	@echo "üìä Last Crawler Run:"
	@docker-compose -f docker-compose.evolution.yml exec -T roundtable-scheduler \
		ls -la logs/crawler_last_run.log 2>/dev/null | tail -1 || echo "No crawler logs found"
	@echo ""
	@echo "üéØ Challenge Discovery Rate:"
	@docker-compose -f docker-compose.evolution.yml exec -T roundtable-scheduler \
		python3 -c "import json; f=open('logs/feeding_history.jsonl', 'r'); lines=f.readlines()[-10:]; print(f'Last 10 discoveries: {len(lines)} challenges')" 2>/dev/null || echo "No feeding history"

# Run crawler immediately
crawler-run:
	@echo "üöÄ Running Crawler Immediately..."
	docker-compose -f docker-compose.evolution.yml exec roundtable-scheduler \
		python3 scripts/auto_crawler.py
	@echo "‚úÖ Crawler run completed!"

# View crawler statistics
crawler-stats:
	@echo "üìà Crawler Statistics:"
	@echo ""
	@echo "üî¢ Total Challenges Discovered:"
	@docker-compose -f docker-compose.evolution.yml exec -T roundtable-scheduler \
		wc -l logs/feeding_history.jsonl 2>/dev/null || echo "0"
	@echo ""
	@echo "üìä Discovery Rate (Last 24h):"
	@docker-compose -f docker-compose.evolution.yml exec -T roundtable-scheduler \
		python3 -c "
import json, datetime
try:
    with open('logs/feeding_history.jsonl', 'r') as f:
        lines = f.readlines()[-100:]  # Last 100 entries
    recent = [l for l in lines if 'timestamp' in l]
    print(f'Recent discoveries: {len(recent)} challenges')
except: print('No crawler statistics available')
" 2>/dev/null || echo "Statistics unavailable"
	@echo ""
	@echo "üéØ Domain Distribution:"
	@curl -s http://localhost:8000/api/challenge-queue/stats 2>/dev/null | python3 -m json.tool || echo "API unreachable"

# Check auto-feeder status
feeder-status:
	@echo "üçΩÔ∏è Auto-Feeder Status:"
	@echo ""
	@echo "‚ö° Feeder Service:"
	@docker-compose -f docker-compose.evolution.yml exec -T roundtable-scheduler \
		python3 scripts/auto_feeder_daemon.py --status 2>/dev/null || echo "‚ùå Feeder service unreachable"
	@echo ""
	@echo "üìä Queue Size:"
	@curl -s http://localhost:8000/api/challenge-queue/status 2>/dev/null || echo "Queue status unavailable"

# Force immediate feeding
feeder-run:
	@echo "üöÄ Running Auto-Feeder Immediately..."
	docker-compose -f docker-compose.evolution.yml exec roundtable-scheduler \
		python3 scripts/auto_feeder_daemon.py --feed-now
	@echo "‚úÖ Feeding completed!"

# Show challenge queue status
challenge-queue:
	@echo "üìã Challenge Queue Status:"
	@echo ""
	@echo "üî¢ Queue Size:"
	@ls -la jobs/queue/ 2>/dev/null | wc -l || echo "0"
	@echo ""
	@echo "üéØ Recent Jobs:"
	@ls -t jobs/queue/ 2>/dev/null | head -5 || echo "No jobs in queue"
	@echo ""
	@echo "üìä Queue Metrics:"
	@curl -s http://localhost:8000/api/challenge-queue/metrics 2>/dev/null || echo "Queue metrics unavailable"

# Clean up Docker resources
clean:
	@echo "üßπ Cleaning Docker Resources..."
	docker-compose -f docker-compose.evolution.yml down -v --remove-orphans
	docker system prune -f
	docker volume prune -f
	@echo "‚úÖ Cleanup complete!"

# Validate Docker Compose configuration
validate:
	@echo "‚úÖ Validating Docker Compose Configuration..."
	docker-compose -f docker-compose.evolution.yml config

# Create production volumes
create-volumes:
	@echo "üìÅ Creating Production Volumes..."
	sudo mkdir -p /var/lib/tamagotchi/prometheus
	sudo mkdir -p /var/lib/tamagotchi/grafana
	sudo chown -R 65534:65534 /var/lib/tamagotchi/prometheus
	sudo chown -R 472:472 /var/lib/tamagotchi/grafana
	@echo "‚úÖ Volumes created!"

# Push to evolution-main branch (clean)
push-evolution:
	@echo "üöÄ Preparing Clean Push to Evolution-Main..."
	@echo ""
	@echo "üìã Files to be committed:"
	@git status --porcelain | grep -E "(docker/|docker-compose|Makefile|requirements.txt|\.gitignore|README.md|DOCKER_|EVOLUTION_)" || echo "No evolution files to commit"
	@echo ""
	@read -p "Continue with push? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	@echo ""
	@echo "üßπ Copying evolution .gitignore..."
	cp .gitignore.evolution .gitignore
	@echo "üì¶ Adding essential files only..."
	git add docker/
	git add docker-compose.evolution.yml
	git add Makefile.evolution
	git add requirements.txt
	git add .gitignore
	git add README.md
	git add DOCKER_DEPLOYMENT_CHECKLIST.md
	git add EVOLUTION_CHECKLIST.md
	git add web_ui.py
	git add web_ui_security_patch.py
	git add emotional_roundtable_protocol.py
	git add real_emotional_a2a_server.py
	git add real_emotional_a2a_orchestrator.py
	git add v11_emotional_swarm.py
	git add logic_god_v11_production_server.py
	git add evolve_with_emotions.py
	git add scripts/monitor_evolution.py
	git add scripts/auto_crawler.py
	git add scripts/auto_feeder_daemon.py
	git add scripts/evolution_telegram_notifier.py
	git add trainer/trainer_worker.py
	@echo "üíæ Committing evolution containerization..."
	git commit -m "üê≥üé≠ü™¥ Production Docker Containerization for Evolution-Main

- Enhanced Docker Compose with production security
- INT4 LLama.cpp optimization in swarm-api
- Horizontal scaling ready trainer worker
- CPU-only emotional round-table scheduler
- External TSDB volumes for Prometheus/Grafana
- Lightweight Alpine telegram notifier
- Production Web UI with security patches
- Health checks and metrics endpoints
- Read-only containers with non-root users
- Clean .gitignore for production focus

Ready for: make build && make up && make health"
	@echo "üöÄ Pushing to evolution-main..."
	git push origin evolution-main1:evolution-main --force-with-lease
	@echo "‚úÖ Evolution containerization deployed!"

# Development helpers
dev-up:
	docker-compose -f docker-compose.yml up -d

dev-down:
	docker-compose -f docker-compose.yml down

# Production deployment
prod-deploy: validate create-volumes build up health
	@echo "üéâ Production Evolution Stack Deployed!"
	@echo "üåê Access points:"
	@echo "  - Web UI: http://localhost:5000"
	@echo "  - Grafana: http://localhost:3000"
	@echo "  - Prometheus: http://localhost:9091"
	@echo "  - API: http://localhost:8000"

# Emergency procedures
emergency-stop:
	@echo "üö® Emergency Stop - Killing All Containers..."
	docker kill $$(docker ps -q) 2>/dev/null || true
	docker-compose -f docker-compose.evolution.yml down --remove-orphans

emergency-rollback:
	@echo "üîÑ Emergency Rollback..."
	git checkout evolution-main^
	make build
	make up
	@echo "‚úÖ Rollback complete!"

# Monitoring shortcuts
watch-logs:
	watch -n 2 'docker-compose -f docker-compose.evolution.yml logs --tail=20'

watch-status:
	watch -n 5 'make status'

# Crawler monitoring shortcuts
watch-crawler:
	watch -n 10 'make crawler-stats'

watch-queue:
	watch -n 5 'make challenge-queue'

# Performance testing
perf-test:
	@echo "‚ö° Running Performance Tests..."
	@echo "üß† Testing Swarm API Response Time:"
	@time curl -s http://localhost:8000/health > /dev/null
	@echo "üé≠ Testing Emotional Consensus:"
	@time curl -s -X POST http://localhost:8000/emotional-consensus -H "Content-Type: application/json" -d '{"task": "Performance test"}' > /dev/null

# Crawler performance testing
crawler-perf-test:
	@echo "üï∑Ô∏è Testing Crawler Performance..."
	@echo "üìä Running discovery test..."
	@time docker-compose -f docker-compose.evolution.yml exec roundtable-scheduler \
		python3 scripts/auto_crawler.py --domain=math --count=5
	@echo "üçΩÔ∏è Testing feeder performance..."
	@time docker-compose -f docker-compose.evolution.yml exec roundtable-scheduler \
		python3 scripts/auto_feeder_daemon.py --feed-now

# Security audit
security-audit:
	@echo "üîí Security Audit:"
	@echo "üìä Container Security:"
	docker-compose -f docker-compose.evolution.yml exec swarm-api whoami
	docker-compose -f docker-compose.evolution.yml exec trainer whoami
	docker-compose -f docker-compose.evolution.yml exec roundtable-scheduler whoami
	@echo "üîê File Permissions:"
	docker-compose -f docker-compose.evolution.yml exec swarm-api ls -la /app
	@echo "üõ°Ô∏è Security Options:"
	docker inspect $$(docker-compose -f docker-compose.evolution.yml ps -q) | grep -A 5 "SecurityOpt" 