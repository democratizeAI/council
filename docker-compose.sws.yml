version: '3.8'

# SWS-Core Platform Docker Compose
# =================================
# 
# Swarm-to-Swarm Services platform deployment
# Includes all SWS components with enterprise-grade configuration
#
# Services:
# - Redis: Message streams and caching
# - SWS-Core API: Main platform API with all agents
# - Prometheus: Metrics collection  
# - Grafana: Monitoring dashboards
# - Nginx: Reverse proxy and load balancing

services:
  # Redis - Core message streaming and caching
  redis:
    image: redis:7-alpine
    container_name: sws-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sws-network
    restart: unless-stopped

  # SWS-Core API - Main platform service
  sws-api:
    build:
      context: .
      dockerfile: Dockerfile.sws
    container_name: sws-core-api
    ports:
      - "8080:8080"
      - "9090:9090"  # Prometheus metrics
    environment:
      - REDIS_URL=redis://redis:6379/0
      - SWS_ENV=production
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
    volumes:
      - ./sws:/app/sws:ro
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - agent_repos:/app/repos  # For build agent
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sws-network
    restart: unless-stopped

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sws-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    depends_on:
      - sws-api
    networks:
      - sws-network
    restart: unless-stopped

  # Grafana - Monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sws-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=sws-platform
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - sws-network
    restart: unless-stopped

  # Nginx - Reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: sws-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - sws-api
      - grafana
    networks:
      - sws-network
    restart: unless-stopped

  # Git server for agent repositories (Build Agent)
  gitea:
    image: gitea/gitea:latest
    container_name: sws-gitea
    ports:
      - "3001:3000"
      - "2222:22"
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - GITEA__database__DB_TYPE=sqlite3
      - GITEA__server__DOMAIN=localhost
      - GITEA__server__SSH_DOMAIN=localhost
      - GITEA__server__ROOT_URL=http://localhost:3001/
    volumes:
      - gitea_data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - sws-network
    restart: unless-stopped

  # Redis Commander - Redis management UI (development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: sws-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - sws-network
    restart: unless-stopped
    profiles:
      - development

networks:
  sws-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  gitea_data:
    driver: local
  nginx_logs:
    driver: local
  agent_repos:
    driver: local

# Health check script
x-healthcheck-common: &healthcheck-common
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s 